use ast;
use lexer::{Token,LexingError};
use location::*;

grammar;

extern
{
    type Location = Location;
    type Error = LexingError;

    enum Token
    {
        Int => Token::Integer(<i32>),
        Ident => Token::Identifier(<String>),
        Str => Token::StringLiteral(<String>),

        "else" => Token::Else,
        "false" => Token::False,
        "fn" => Token::Fn,
        "if" => Token::If,
        "let" => Token::Let,
        "mut" => Token::Mut,
        "return" => Token::Return,
        "struct" => Token::Struct,
        "true" => Token::True,
        "while" => Token::While,

        "=" => Token::Eq,
        "." => Token::Dot,
        "*" => Token::Star,
        ":" => Token::Colon,
        ";" => Token::SemiColon,
        "," => Token::Comma,
        "'" => Token::Apostrophe,

        "+" => Token::Plus,
        "-" => Token::Minus,
        "/" => Token::Slash,
        "%" => Token::Percent,
        "&&" => Token::And,
        "||" => Token::Or,

        "==" => Token::DoubleEq,
        "!=" => Token::NotEq,
        ">=" => Token::Geq,
        "<=" => Token::Leq,

        "!" => Token::Bang,
        "&" => Token::Ampersand,

        "(" => Token::LeftParen,
        ")" => Token::RightParen,
        "{" => Token::LeftBrace,
        "}" => Token::RightBrace,
        "[" => Token::LeftBracket,
        "]" => Token::RightBracket,
        "<" => Token::LeftChevron,
        ">" => Token::RightChevron,

        "->" => Token::RightArrow,
    }
}

pub Program: ast::Program =
{
    <decls:Decl*> => decls
};

Decl: ast::Decl =
{
    <f:Fun> => ast::Decl::Function(f),
    <s:Struct> => ast::Decl::Structure(s)
};

Fun: ast::Fun =
{
    "fn" <name:Loc<Ident>> "(" <args:Comma<Arg>> ")" "->" <ret_type:Loc<Type>>
        <body:Block> =>
        ast::Fun{ name, arguments:args, return_type:ret_type, body },
    "fn" <name:Loc<Ident>> "(" <args:Comma<Arg>> ")" <body:Block> =>
        ast::Fun{ name, arguments:args, body,
                  return_type: Located::new(ast::Type::Void, EMPTY_SPAN) }
};

Struct: ast::Struct =
{
    "struct" <name:Loc<Ident>> "{" <fields:Comma<Field>> "}" =>
        ast::Struct{name, fields}
};

Field: (ast::LIdent, ast::LType) =
{
    <id:Loc<Ident>> ":" <typ:Loc<Type>> => (id, typ)
};

Type: ast::Type =
{
    "(" ")" => ast::Type::Void,
    <id:Ident> =>
    {
        if &id == "i32" { ast::Type::Int32 }
        else if &id == "bool" { ast::Type::Bool }
        else { ast::Type::Basic(id) }
    },

    <id:Ident> "<" <params:Type> ">" =>
        ast::Type::Parametrized(id, Box::new(params)),

    "&" <t:Type> => ast::Type::Ref(Box::new(t)),
    "&" "mut" <t:Type> => ast::Type::MutRef(Box::new(t))
};

Arg: ast::Arg =
{
    <m:Mut> <name:Loc<Ident>> ":" <typ:Loc<Type>> =>
        ast::Arg { mutable:m, name, typ }
};

Mut: bool =
{
    <m:"mut"?> => m.is_some()
};

Block: ast::Block =
{
    "{" <instr:(Loc<Instr>)*> <expr:(Loc<Expr>)?> "}" =>
    {
        if let Some(e) = expr
        {
            ast::Block { instr, expr:e }
        }
        else
        {
            let mut instr = instr;
            if let Some(Located { data, loc }) = instr.pop()
            {
                if let ast::Instr::If(if_expr) = data
                {
                    ast::Block { instr, expr:
                        Located::new(ast::Expr::If(Box::new(if_expr)), loc)}
                }
                else
                {
                    instr.push(Located::new(data, loc));
                    ast::Block { instr, expr:ast::LEXPR_VOID }
                }
            }
            else
            {
                ast::Block { instr, expr:ast::LEXPR_VOID }
            }
        }
    }
};

Instr: ast::Instr =
{
    ";" => ast::Instr::NoOp,

    <expr:Loc<Expr>> ";" => ast::Instr::Expression(expr),

    "let" <m:Mut> <id:Loc<Ident>> "=" <expr:Loc<StructExpr>> ";" =>
        ast::Instr::Let(m, id, expr),

    "while" <cond:Loc<Expr>> <body:Block> =>
        ast::Instr::While(cond, Box::new(body)),

    "return" <expr:(Loc<Expr>)?> ";" =>
        ast::Instr::Return(expr.unwrap_or(ast::LEXPR_VOID)),

    <instr:IfExpr> => ast::Instr::If(instr)
};

IfExpr: ast::IfExpr =
{
    "if" <cond:Loc<Expr>> <block_true:Block> =>
    {
        let empty_block = ast::Block { instr:Vec::new(), expr:ast::LEXPR_VOID };
        ast::IfExpr::Single(cond, Box::new(block_true), Box::new(empty_block))
    },
    "if" <cond:Loc<Expr>> <block_true:Block> "else" <block_false:Block> =>
        ast::IfExpr::Single(cond, Box::new(block_true), Box::new(block_false)),
    "if" <cond:Loc<Expr>> <block:Block> "else" <elif:IfExpr> =>
        ast::IfExpr::Nested(cond, Box::new(block), Box::new(elif))
};

StructExpr: ast::Expr =
{
    <struct_name:Loc<Ident>> "{" <fields:Comma<FieldValue>> "}" =>
        ast::Expr::StructConstr(struct_name, fields),
    <e:Expr> => e
};

FieldValue: (ast::LIdent, ast::LExpr) =
{
    <name:Loc<Ident>> ":" <val:Loc<Expr>> => (name, val)
};

Expr: ast::Expr =
{
    <var:Loc<OrExpr>> "=" <val:Loc<Expr>> =>
        ast::Expr::Assignment(Box::new(var), Box::new(val)),
    <e:OrExpr> => e
};

OrExpr: ast::Expr =
{
    <l:Loc<OrExpr>> "||" <r:Loc<AndExpr>> =>
        ast::Expr::Logic(ast::LogicOp::Or, Box::new(l), Box::new(r)),
    <e:AndExpr> => e
};

AndExpr: ast::Expr =
{
    <l:Loc<AndExpr>> "&&" <r:Loc<CmpExpr>> =>
        ast::Expr::Logic(ast::LogicOp::And, Box::new(l), Box::new(r)),
    <e:CmpExpr> => e
};

CmpExpr: ast::Expr =
{
    <l:Loc<Term>> <comp:Comparator> <r:Loc<Term>> =>
        ast::Expr::Comparison(comp, Box::new(l), Box::new(r)),
    <e:Term> => e
};

Comparator: ast::Comp =
{
    "==" => ast::Comp::Equal,
    "!=" => ast::Comp::NotEqual,
    "<"  => ast::Comp::Less,
    "<=" => ast::Comp::LessEq,
    ">"  => ast::Comp::Greater,
    ">=" => ast::Comp::GreaterEq
};

Term: ast::Expr =
{
    <l:Loc<Term>> "+" <r:Loc<Factor>> =>
        ast::Expr::Arithmetic(ast::ArithOp::Addition, Box::new(l), Box::new(r)),
    <l:Loc<Term>> "-" <r:Loc<Factor>> =>
        ast::Expr::Arithmetic(ast::ArithOp::Substraction,
                              Box::new(l), Box::new(r)),
    <e:Factor> => e
};

Factor: ast::Expr =
{
    <l:Loc<Factor>> "*" <r:Loc<UnaryExpr>> =>
        ast::Expr::Arithmetic(ast::ArithOp::Multiplication,
                              Box::new(l), Box::new(r)),
    <l:Loc<Factor>> "/" <r:Loc<UnaryExpr>> =>
        ast::Expr::Arithmetic(ast::ArithOp::Division, Box::new(l), Box::new(r)),
    <l:Loc<Factor>> "%" <r:Loc<UnaryExpr>> =>
        ast::Expr::Arithmetic(ast::ArithOp::Remainder,
                              Box::new(l), Box::new(r)),
    <e:UnaryExpr> => e
};

UnaryExpr: ast::Expr =
{
    "-" <e:Loc<ArrExpr>> => ast::Expr::Minus(Box::new(e)),
    "!" <e:Loc<ArrExpr>> => ast::Expr::Not(Box::new(e)),
    "*" <e:Loc<ArrExpr>> => ast::Expr::Deref(Box::new(e)),
    "&" <e:Loc<ArrExpr>> => ast::Expr::Ref(Box::new(e)),
    "&" "mut" <e:Loc<ArrExpr>> => ast::Expr::MutRef(Box::new(e)),
    <e:ArrExpr> => e
};

ArrExpr: ast::Expr =
{
    <e:Loc<DotExpr>> "[" <i:Loc<Expr>> "]" =>
        ast::Expr::ArrayAccess(Box::new(e), Box::new(i)),
    <e:DotExpr> => e
};

DotExpr: ast::Expr =
{
    <e:Loc<DotExpr>> "." <attr:Loc<Ident>> =>
        ast::Expr::Attribute(Box::new(e), attr),
    <e:Loc<DotExpr>> "." <method:Loc<Ident>>
        "(" <params:Comma<Loc<Expr>>> ")" =>
        ast::Expr::MethodCall(Box::new(e), method, params),
    <e:AtomicExpr> => e
};

AtomicExpr: ast::Expr =
{
    <int:Int> => ast::Expr::Constant(ast::Const::Int32(int)),
    "true" => ast::Expr::Constant(ast::Const::Bool(true)),
    "false" => ast::Expr::Constant(ast::Const::Bool(false)),
    <var:Loc<Ident>> => ast::Expr::Variable(var),
    <name:Loc<Ident>> "(" <params:Comma<Loc<Expr>>> ")" =>
        ast::Expr::FunctionCall(name, params),
    <name:Loc<Ident>> "!" "[" <l:Comma<Loc<Expr>>> "]" =>
        ast::Expr::ListMacro(name, l),
    <name:Loc<Ident>> "!" "(" <s:Str> ")" => ast::Expr::StringMacro(name,s),
    "(" <e:Expr> ")" => e,
    <block:Block> => ast::Expr::NestedBlock(Box::new(block))
};

SeparatedList<S,E>: Vec<E> =
    <v:(<E> S)*> <e:E?> => v.into_iter().chain(e).collect();

Comma<E> = SeparatedList<",", E>;

#[inline]
Loc<E>: Located<E> =
{
    <l: @L> <e: E> <r: @R> => Located::new(e, Span{start:l, end:r})
};

